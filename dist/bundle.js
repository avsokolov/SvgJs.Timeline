!function(n){var t={};function i(e){if(t[e])return t[e].exports;var s=t[e]={i:e,l:!1,exports:{}};return n[e].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=n,i.c=t,i.d=function(n,t,e){i.o(n,t)||Object.defineProperty(n,t,{configurable:!1,enumerable:!0,get:e})},i.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return i.d(t,"a",t),t},i.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},i.p="",i(i.s=0)}([function(module,exports){eval("function EventsWrapper(element, eventsGroupId) {\n    this.__proto__ = element;\n    function extendEvent(event) {\n        var ev = event.split('.')[0];\n        var ns = event.split('.')[1];\n\n        return ev+'.'+ns+eventsGroupId;\n    }\n    this.on = function on(event, listener) {\n        element.on(extendEvent(event), listener);\n        return this;\n    };\n    this.off = function on(event, listener) {\n        element.off(extendEvent(event), listener);\n        return this;\n    };\n}\n\nvar idGen = 0;\n\nSVG.Timeline = SVG.invent({\n    create: function(element) {\n        this._target = new EventsWrapper(element, ++idGen);\n        this._fx = new SVG.FX(this._target);\n        this.state = {};\n        this._allSituations = [];\n        this._onceAllCallbacks = {};\n        this._events = {\n            afterAll: [],\n            duringAll: []\n        };\n\n        //virtual inheritance of SVG.FX\n        var timelineMethods = Object.keys(SVG.Timeline.prototype);\n        var instance = this;\n        Object.keys(SVG.FX.prototype)\n            .filter(function (key) {\n                return (\n                    //do not inherit private methods\n                    key[0] !== '_' &&\n                    //override methods\n                    timelineMethods.indexOf(key) === -1 &&\n                    //inherit only methods\n                    typeof SVG.FX.prototype[key] === 'function'\n                );\n            })\n            .forEach(function (key) {\n                instance[key] = function () {\n                    var res = instance._fx[key].apply(instance._fx, arguments);\n\n                    return res === instance._fx ? instance : res;\n                }\n            });\n\n        //init animation if parameters passed\n        if (arguments.length>1) {\n            if (arguments[1].length) {\n                this.animate.apply(this, arguments[1]);\n            } else if (typeof arguments[1] === 'number') {\n                var args = [];\n                for (var i=1; i<arguments.length; i++) {\n                    args.push(arguments[i]);\n                }\n\n                this.animate.apply(this, args);\n            }\n        }\n\n        Object.defineProperty(this.state, 'play', {\n            get: function(){\n                return instance._fx.active && !instance._fx.paused;\n            }\n        });\n\n        Object.defineProperty(this.state, 'duration', {\n            get: function(){\n                return instance.duration();\n            }\n        });\n\n        this.afterAll(function () {\n            console.log('finished');\n            instance.stop();\n        })\n    },\n\n    extend: {\n        _situationDuration: function(situation) {\n            return (situation.delay + situation.duration)*(situation.loops && situation.loop>0 ? situation.loop : 1);\n        },\n        timeline: function() {\n            return this._target.timeline.apply(this._target, arguments);\n        },\n        /**\n         * sets or returns the target of this animation\n         * @param o object || number In case of Object it holds all parameters. In case of number its the duration of the animation\n         * @param ease function || string Function which should be used for easing or easing keyword\n         * @param delay Number indicating the delay before the animation starts\n         * @return this\n         */\n        animate: function (o, ease, delay) {\n            this._fx.animate(o, ease, delay);\n            this._allSituations.push(this._fx.last());\n            return this;\n        },\n\n        duration: function() {\n            var result = 0;\n            var instance = this;\n            this._allSituations.forEach(function (situation) {\n                result += instance._situationDuration(situation);\n            });\n\n            return result;\n        },\n\n        atStart: function() {\n            if (!this._allSituations.length) return;\n\n            var isActive = !this._fx.paused;\n            this._fx.situations = [];\n\n            var num = this._fx.situation ?\n                this._allSituations.indexOf(this._fx.situation) :\n                this._allSituations.length-1;\n\n            for(var i=this._allSituations.length-1; i>num; i--) {\n                this._fx.situations.push(this._allSituations[i]);\n            }\n\n            for(;num>=0;num--) {\n                this._fx.situation = this._allSituations[num];\n                this._fx.paused = false;\n                this._fx.active = true;\n                this._fx.play();\n                this._fx.startCurrent();\n                if (num) {\n                    this._fx.situations.push(this._fx.situation);\n                }\n            }\n\n            this._subscribeOnceAll();\n\n            if (!isActive) {\n                this._fx.pause();\n            } else {\n                this._fx.play();\n            }\n        },\n\n        atEnd: function() {\n            this.at(1);\n        },\n\n        /**\n         * seek to specific position from the whole timeline animation\n         * @param pos Number\n         */\n        at: function(pos) {\n            if (!this._allSituations.length) return;\n\n            var isActive = !this._fx.paused;\n            this._fx.pause();\n            this.atStart();\n\n            var sumDuration = this.duration();\n            pos = Math.max(Math.min(pos, 1), 0);\n\n            //seek val at pos\n            var instance = this;\n            var found = false;\n            var duration = 0;\n            var situationSeek = 0;\n            var dist = sumDuration * pos;\n            this._fx.situations = [];\n            this._allSituations.forEach(function (situation) {\n                situation.once = {};\n                if (!found) {\n                    var dur = instance._situationDuration(situation);\n                    duration += dur;\n                    if (dist < duration) {\n                        found = true;\n                        instance._fx.situation = situation;\n                        if (!situation.init) {\n                            instance._fx.startCurrent();\n                        }\n                        situationSeek = 1 - (duration - dist)/dur;\n                    } else {\n                        instance._fx.situation = situation;\n                        instance._fx.startCurrent();\n                        instance._fx.atEnd();\n                    }\n                } else {\n                    instance._fx.situations.push(situation);\n                }\n            });\n\n            this._subscribeOnceAll();\n            this._subscribeEvents();\n            if (this._fx.situation) {\n                this._fx.start();\n                this._fx.at(situationSeek, true);\n                if (!isActive) {\n                    this._fx.pause();\n                } else {\n                    this._fx.play();\n                }\n            }\n        },\n        stop: function(jumpToEnd) {\n            if (jumpToEnd) {\n                this.atEnd();\n            }\n\n            this._fx.stop();\n            this._events = null;\n\n            if (this._destroyCallbacks) {\n                var instance = this;\n                this._destroyCallbacks.forEach(function (callback) {\n                    callback.call(instance);\n                });\n            }\n\n            this._allSituations = [];\n            this._destroyCallbacks = null;\n            var indexOfCurrent = this._target.fxt.timelines.indexOf(this);\n            if (indexOfCurrent !== -1) {\n                this._target.fxt.timelines.splice(indexOfCurrent, 1);\n            }\n            this._target = null;\n            this._onceAllCallbacks = {};\n\n            return this;\n        },\n        start: function() {\n            this.atStart();\n\n            this._subscribeOnceAll();\n\n            this._fx.start();\n            this._fx.play();\n\n            return this;\n        },\n        delay: function (duration) {\n            this._fx.delay(duration);\n            this._allSituations.push(this._fx.last());\n            return this;\n        },\n        _subscribeOnceAll: function() {\n            this._allSituations.forEach(function (situation) {\n                situation.once = {};\n            });\n\n            var subscribe = this._subscribeOnce.bind(this);\n            Object.keys(this._onceAllCallbacks).forEach(subscribe);\n        },\n        _subscribeOnce: function(key) {\n            var duration = this.duration();\n            var pos = key * 1;\n            if (isNaN(pos)) {\n                pos = 1;\n            }\n\n            var offset = 0;\n            var dist = duration*pos;\n            var found = false;\n            var instance = this;\n\n            this._allSituations.forEach(function (situation) {\n                if (!found) {\n                    var dur = instance._situationDuration(situation);\n                    offset += dur;\n                    if (dist <= offset) {\n                        found = true;\n                        var innerPos = (dist - (offset-dur))/dur;\n                        if (innerPos===0) {\n                            innerPos += 0.000000001;\n                        }\n                        if (innerPos===1) {\n                            innerPos -= 0.000000001;\n                        }\n                        situation.once[innerPos] = function (pos, easy) {\n                            instance._onceAllCallbacks[key](((offset-dur)+dur*easy)/duration);//add absolute (timeline) position\n                        }\n                    }\n                }\n            });\n        },\n        onceAll: function(pos, fn){\n            if (pos===0) {\n                pos += 0.000000001;\n            }\n            if (pos===1) {\n                pos -= 0.000000001;\n            }\n\n            this._onceAllCallbacks[pos] = fn;\n\n            if (!this._fx.paused) {\n                this._subscribeOnce(pos);\n            }\n\n            return this;\n        },\n        _subscribeEvents: function() {\n            //unsubscribe all\n            if (this._destroyCallbacks) {\n                var instance = this;\n                this._destroyCallbacks.forEach(function (callback) {\n                    callback.call(instance);\n                });\n            }\n\n            //re-subscribe all\n            var instance = this;\n            this._events.afterAll.forEach(function(fn) {\n                instance.afterAll(fn);\n            });\n            this._events.duringAll.forEach(function(fn) {\n                instance.duringAll(fn);\n            });\n        },\n        afterAll: function (fn) {\n            if (-1 === this._events.afterAll.indexOf(fn)) {\n                this._events.afterAll.push(fn);\n            }\n\n            var instance = this;\n            var wrapper = function wrapper(e){\n                var i = instance._allSituations.indexOf(e.detail.situation);\n                if (i !== instance._allSituations.length-1) return;\n\n                fn.call(this);\n            };\n\n            // see above\n            this.target().off('finished.fx', wrapper).on('finished.fx', wrapper);\n\n            if (!this._destroyCallbacks) {\n                this._destroyCallbacks = [];\n            }\n\n            this._destroyCallbacks.push(function(){\n                instance.target().off('finished.fx', wrapper)\n            });\n\n            return this;\n        },\n        duringAll: function(fn) {\n            if (-1 === this._events.duringAll.indexOf(fn)) {\n                this._events.duringAll.push(fn);\n            }\n            var instance = this;\n            var wrapper = function(e){\n                var i = instance._allSituations.indexOf(e.detail.situation);\n                if (-1 === i) return;\n\n                var duration = instance.duration();\n                var currentDuration = instance._situationDuration(e.detail.situation);\n                var sum = instance._allSituations.reduce(function(state, situation, index) {\n                    return state + (index < i ? instance._situationDuration(situation) : 0);\n                }, 0);\n\n                var pos = (sum+currentDuration*e.detail.eased)/duration;\n                fn.call(this, pos, SVG.morph(pos));\n            };\n\n            this.target().off('during.fx', wrapper).on('during.fx', wrapper);\n\n            if (!this._destroyCallbacks) {\n                this._destroyCallbacks = [];\n            }\n\n            this._destroyCallbacks.push(function(){\n                instance.target().off('during.fx', wrapper)\n            });\n\n            return this;\n        }\n    }\n});\n\nSVG.FXT = SVG.invent({\n    create: function(element) {\n        this._target = element;\n        //list of all timelines\n        this.timelines = [];\n    },\n\n    parent: SVG.Element,\n\n    extend: {\n        timeline: function () {\n            var newTm = new SVG.Timeline(this._target, arguments);\n            this.timelines.push(newTm);\n\n            return newTm;\n        }\n    },\n\n    construct: {\n        //create new time-line\n        timeline: function () {\n            if (!this.fxt) {\n                this.fxt = new SVG.FXT(this);\n            }\n\n            return this.fxt.timeline.apply(this.fxt, arguments);\n        },\n        /**\n         * stop all time-lines\n         */\n        stop: function (jumpToEnd) {\n            return this._callAll('stop', [jumpToEnd]);\n        },\n        /**\n         * start all time-lines\n         */\n        start: function () {\n            return this._callAll('start');\n        },\n        /**\n         * play all animations in timeline\n         */\n        play: function () {\n            return this._callAll('play');\n        },\n        /**\n         * pause all animations in timeline\n         */\n        pause: function () {\n            return this._callAll('pause');\n        },\n        /**\n         * pause all animations in timeline\n         */\n        atStart: function () {\n            return this._callAll('atStart');\n        },\n\n        _callAll: function(method, args) {\n            if (this.fxt) {\n                args = args || [];\n                this.fxt.timelines.forEach(function (animation) {\n                    animation[method].apply(animation, args);\n                });\n            }\n\n            return this;\n        }\n    }\n});\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 0\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/index.js?")}]);